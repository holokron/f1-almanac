#!/usr/bin/env node

const program = require("commander")
const path = require("path")
const fs = require("fs")
const { create } = require("../src/lib/client")
const merge = require("lodash/merge")
const omit = require("lodash/omit")
const client = create()

function configure() {
    program
        .version("0.2.0")
        .option("-a, --all-seasons", "Download data from all seasons", false)
        .option("-s, --season <season>", "Season", (season, seasons) => { seasons.push(season); return seasons }, [])
        .option("-d, --data-dir <dir>", "Directory for data", `${__dirname}/../data`)    
}

function execute() {
    if (process.env.SKIP_GENERATE_DATA === "1") {
        console.log("Skipping data generation")
        return;
    }

    program.parse(process.argv)

    const dataDir = path.resolve(program.dataDir)

    console.log(`Data directory: ${dataDir}`)

    const seasons = program.allSeasons || "1" === process.env.DOWNLOAD_ALL_DATA
        ? getAllSeasons()
        : program.season.length
            ? program.season
            : ["2019"]

    console.log(`Seasons: ${seasons.join(", ")}`)

    Promise.all(seasons.map(season => downloadSeasonData(season, dataDir)))
}

function getAllSeasons() {
    const amount = (new Date().getFullYear()) - 1950 + 1

    return [...Array(amount).keys()].map(i => i + 1950)
}

function saveResponse(response, path) {
    const data = JSON.stringify(response)

    fs.writeFileSync(path, data)
}

async function downloadSeasonData(season, dir) {
    const seasonDir = dir
    if (!fs.existsSync(seasonDir)) {
        fs.mkdirSync(seasonDir, {
            recursive: true,
        })
    }

    return Promise.all([
        downloadSeasonsData(dir),
        downloadDriversPerSeasonData(season, dir),
        downloadConstructorsPerSeasonData(season, dir),
        downloadRacesData(season, dir),
        downloadStandings(season, dir),
    ])
    .catch(error => {
        console.log(`Incomplete data for season: ${season} - ${error}`)
    })
    .then((response) => {

        console.log(`Downloaded data for season: ${season}.`)    
    })
}

async function downloadSeasonsData(dir) {
    const response = await client.getSeasonsList()

    response.MRData.SeasonTable.Seasons.forEach((item) => {
        saveResponse(item, `${dir}/seasons/${item.season}.json`)
    })
}

async function downloadDriversPerSeasonData(season, dir) {
    const response = await client.getDriversForSeason(season)

    saveResponse(response.MRData.DriverTable, `${dir}/driversPerSeason/${season}.json`)
}

async function downloadConstructorsPerSeasonData(season, dir) {
    const response = await client.getConstructorsForSeason(season)

    saveResponse(response.MRData.ConstructorTable, `${dir}/constructorsPerSeason/${season}.json`)
}

async function downloadRacesData(season, dir) {
    const racesResponse = await client.getRacesForSeason(season)
    const racesQualifyingResultsResponse = await client.getRacesQualifyingResultsForSeason(season)
    const racesResultsResponse = await client.getRacesResultsForSeason(season)

    merge(
        racesResponse.MRData.RaceTable,
        racesResultsResponse.MRData.RaceTable,
        racesQualifyingResultsResponse.MRData.RaceTable,
    ).Races.forEach(item => {
        saveResponse(item, `${dir}/races/${item.season}-${item.round}.json`)
    })
}

async function downloadStandings(season, dir) {
    const driversStandingsResponse = await client.getDriversStandingsForSeason(season)
    const constructorsStandingsResponse = await client.getConstructorsStandingsForSeason(season)
    
    merge(
        driversStandingsResponse.MRData.StandingsTable,
        constructorsStandingsResponse.MRData.StandingsTable,
    ).StandingsLists.forEach(item => {

        saveResponse(item, `${dir}/standings/${season}.json`)
    })
}

configure()
execute()